name: Build

on:
  push:
    branches:
      - main

jobs:
  Android:
    name: Android
    runs-on: ubuntu-latest
    steps:
      - name: Check out git repository
        uses: actions/checkout@v4

      - name: Setup Node.js 20.19.4
        uses: actions/setup-node@v4
        with:
          node-version: '20.19.4'
          cache: 'npm'

      - name: Install npm dependencies
        run: npm install --legacy-peer-deps

      - name: Setup Java environment
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Clean duplicate icon files
        run: |
          if [ -d "android/app/src/main/res" ]; then
            cd android/app/src/main/res
            find . -name "ic_launcher.png" -delete
            find . -name "ic_launcher_round.png" -delete
            echo "清理完成，检查剩余文件："
            find . -name "ic_launcher*" -type f
          else
            echo "res目录不存在，跳过清理步骤"
          fi

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Validate Keystore Configuration
        shell: bash
        run: |
          echo "Validating keystore configuration..."
          cd android
          echo "${{ secrets.KEYSTORE_STORE_FILE_BASE64 }}" | base64 --decode > app/temp_validate.keystore
          keytool -list -keystore app/temp_validate.keystore -storepass "${{ secrets.KEYSTORE_PASSWORD }}" -alias "${{ secrets.KEYSTORE_KEY_ALIAS }}" > /dev/null 2>&1
          if [ $? -eq 0 ]; then
            echo "Keystore validation passed"
            rm -f app/temp_validate.keystore
          else
            echo "Keystore validation failed"
            rm -f app/temp_validate.keystore
            exit 1
          fi

      - name: Build Android Release
        shell: bash
        run: |
          cd android
          echo "Building release version..."
          ./gradlew clean
          echo "${{ secrets.KEYSTORE_STORE_FILE_BASE64 }}" | base64 --decode > app/temp_release.keystore
          ./gradlew assembleRelease \
            -PMYAPP_UPLOAD_STORE_FILE="temp_release.keystore" \
            -PMYAPP_UPLOAD_KEY_ALIAS="${{ secrets.KEYSTORE_KEY_ALIAS }}" \
            -PMYAPP_UPLOAD_STORE_PASSWORD="${{ secrets.KEYSTORE_PASSWORD }}" \
            -PMYAPP_UPLOAD_KEY_PASSWORD="${{ secrets.KEYSTORE_KEY_PASSWORD }}" \
            --no-daemon
          rm -f app/temp_release.keystore
          echo "✅ Android Release APK 构建完成！"
